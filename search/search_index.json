{"config":{"lang":["en","ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pt-nad-client","title":"PT NAD Client","text":"<p>Documentation: https://reversenant/test-nad</p> <p>Source Code: https://github.com/reversenant/test-nad</p> <p>Python library for interacting with the PT NAD API.</p>"},{"location":"#installation","title":"\ud83d\ude80 Installation","text":"<pre><code>pip install ptnad-client\n</code></pre>"},{"location":"#usage","title":"\ud83d\udcd6 Usage","text":"<p><pre><code>from ptnad import PTNADClient\n\nclient = PTNADClient(\"https://1.3.3.7\", verify_ssl=False)\nclient.set_auth(username=\"user\", password=\"pass\")\n# client.set_auth(auth_type=\"sso\", username=\"user\", password=\"pass\", client_id=\"ptnad\", client_secret=\"11111111-abcd-asdf-12334-0123456789ab\", sso_url=\"https://siem.example.local:3334\")\nclient.login()\n\nquery = \"SELECT src.ip, dst.ip, proto FROM flow WHERE end &gt; 2025.02.25 and end &lt; 2025.02.26 LIMIT 10\"\nresult = client.bql.execute(query)\nprint(f\"Results: {result}\")\n</code></pre> </p>"},{"location":"#features","title":"\u2705 Features","text":"<p>\ud83d\udd10 Authentication - Local authentication - IAM (SSO) authentication</p> <p>\ud83d\udcca BQL Queries - Execute queries</p> <p>\ud83d\udce1 Monitoring - Get system status - Manage triggers</p> <p>\ud83d\udee1\ufe0f Signatures - Retrieve classes - Get rules (all/specific) - Commit/Revert changes</p> <p>\ud83d\udccb Replists - Create/Modify basic and dynamic replists - Retrieve replist info</p>"},{"location":"#upcoming-features","title":"\ud83d\udee0\ufe0f Upcoming Features","text":"<ul> <li>Documentation</li> <li>Sources management</li> <li>Hosts management</li> <li>Groups management</li> </ul>"},{"location":"#contributing","title":"\ud83e\uddd1\u200d\ud83d\udcbb Contributing","text":"<p>Want to contribute? Check out the following:</p> <ul> <li>\ud83d\udcc4 Contributor Guide</li> </ul> <p>We welcome all ideas, suggestions, and improvements!</p>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"CONTRIBUTING/","title":"\ud83e\udd1d Contributing Guide","text":"<p>Thank you for your interest in the project! Here's how you can contribute:</p>"},{"location":"CONTRIBUTING/#getting-started","title":"\ud83d\ude80 Getting Started","text":"<ol> <li>Fork the repository</li> <li>Create a new branch: <pre><code>git checkout -b feature/your_feature\n</code></pre></li> <li>Make all necessary changes</li> <li>Be sure to test your code</li> <li>Create a Pull Request to <code>main</code> or <code>dev</code> (confirm if unsure)</li> </ol>"},{"location":"CONTRIBUTING/#what-we-appreciate","title":"\u2705 What We Appreciate","text":"<ul> <li>Improving documentation</li> <li>Reporting issues</li> <li>New features (ideally after discussion)</li> <li>Adding new tests for existing functionality</li> </ul>"},{"location":"CONTRIBUTING/#code-style","title":"\ud83e\uddf9 Code Style","text":"<ul> <li>Follow formatting and style guidelines (eslint/black/prettier)</li> <li>Try to write meaningful commit messages: <pre><code>feature: Added support for X\nfix: Fixed bug Y\ndocs: Updated documentation\n</code></pre></li> </ul>"},{"location":"CONTRIBUTING/#want-to-help-with-translation","title":"\ud83c\udf10 Want to Help with Translation?","text":"<p>We aim to make the project accessible to as many people as possible. If you'd like to help translate into another language \u2014 it's very welcome!</p> <p>\ud83d\udcc4 Available translations: - \ud83c\uddfa\ud83c\uddf8 English (default) - \ud83c\uddf7\ud83c\uddfa Russian (in progress) - \ud83c\udf10 Your language? Help us add it!</p> <p>Create a corresponding issue.</p>"},{"location":"CONTRIBUTING/#best-practices","title":"\ud83d\udee0 Best Practices","text":"<ul> <li>Use stable dependency versions listed in <code>package.json</code> / <code>requirements.txt</code> / <code>pyproject.toml</code></li> <li>Follow the project's coding style (e.g., via <code>eslint</code>, <code>black</code>, <code>prettier</code>, etc.)</li> <li>Write readable and self-documenting code</li> <li>Try to cover new functionality with tests</li> <li>Before creating an issue \u2014 check if a similar one already exists</li> <li>Create feature branches and submit pull requests with clear descriptions</li> </ul>"},{"location":"CONTRIBUTING/#developer-certificate-of-origin-dco","title":"\u270d\ufe0f Developer Certificate of Origin (DCO)","text":"<p>Thank you for your contribution! To ensure transparency and legal clarity in the project, we use the Developer Certificate of Origin (DCO).</p>"},{"location":"CONTRIBUTING/#what-is-dco","title":"\ud83d\udcdc What is DCO?","text":"<p>The DCO is a simple statement that you have the right to submit the code you\u2019re contributing and that you agree to the project\u2019s license. This is especially important for open source projects.</p> <p>Full DCO text: https://developercertificate.org</p>"},{"location":"CONTRIBUTING/#what-do-you-need-to-do","title":"\u2705 What do you need to do?","text":"<p>Every commit must be signed. You can do this by adding the <code>-s</code> flag when creating a commit:</p> <pre><code>git commit -s -m \"fix: fixed error handling\"\n</code></pre> <p>Example of a commit signature:</p> <pre><code>Signed-off-by: John Doe &lt;john@example.com&gt;\n</code></pre>"},{"location":"CONTRIBUTING/#configure-your-name-and-email","title":"\ud83d\udee0 Configure your name and email","text":"<p>Make sure Git is configured with your name and email:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your_email@example.com\"\n</code></pre>"},{"location":"CONTRIBUTING/#how-to-re-sign-commits","title":"\ud83d\udd01 How to re-sign commits","text":"<p>If you forgot to sign a commit:</p>"},{"location":"CONTRIBUTING/#one-commit","title":"One commit","text":"<pre><code>git commit --amend -s\ngit push --force\n</code></pre>"},{"location":"CONTRIBUTING/#multiple-commits","title":"Multiple commits","text":"<pre><code>git rebase -i HEAD~N  # Replace N with the number of recent commits\n</code></pre> <p>Change <code>pick</code> to <code>edit</code> for the commits you want to sign, and for each:</p> <pre><code>git commit --amend -s\ngit rebase --continue\n</code></pre> <p>After finishing the rebase:</p> <pre><code>git push --force\n</code></pre> <p>\u26a0\ufe0f Warning: use <code>--force</code> with caution, especially when working in a team.</p>"},{"location":"reference/","title":"Init","text":""},{"location":"reference/#ptnad.PTNADClient","title":"ptnad.PTNADClient","text":"<pre><code>PTNADClient(base_url: str, verify_ssl: bool = True)\n</code></pre> Source code in <code>src/ptnad/client.py</code> <pre><code>def __init__(self, base_url: str, verify_ssl: bool = True):\n    self.base_url = base_url.rstrip('/') + '/api/v2/'\n    self.verify_ssl = verify_ssl\n    self.session = requests.Session()\n    self.session.verify = self.verify_ssl\n    if not self.verify_ssl:\n        warnings.simplefilter('ignore', InsecureRequestWarning)\n    self.csrf_token = None\n    self.auth = Auth(self)\n    self.monitoring = MonitoringAPI(self)\n    self.signatures = SignaturesAPI(self)\n    self.replists = RepListsAPI(self)\n    self.bql = BQLAPI(self)\n</code></pre>"},{"location":"reference/#ptnad.PTNADException","title":"ptnad.PTNADException","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all PTNAD-related errors.</p>"},{"location":"reference/#ptnad.PTNADAPIError","title":"ptnad.PTNADAPIError","text":"<pre><code>PTNADAPIError(message, status_code=None, response=None, operation=None)\n</code></pre> <p>               Bases: <code>PTNADException</code></p> <p>Exception raised for errors in the API.</p> Source code in <code>src/ptnad/exceptions.py</code> <pre><code>def __init__(self, message, status_code=None, response=None, operation=None):\n    self.message = message\n    self.status_code = status_code\n    self.response = response\n    self.operation = operation\n\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/auth/","title":"Auth","text":""},{"location":"reference/auth/#ptnad.auth.AuthStrategy","title":"ptnad.auth.AuthStrategy","text":"<p>               Bases: <code>ABC</code></p>"},{"location":"reference/auth/#ptnad.auth.LocalAuth","title":"ptnad.auth.LocalAuth","text":"<pre><code>LocalAuth(username: str, password: str)\n</code></pre> <p>               Bases: <code>AuthStrategy</code></p> Source code in <code>src/ptnad/auth.py</code> <pre><code>def __init__(self, username: str, password: str) -&gt; None:\n    self.username = username\n    self.password = password\n</code></pre>"},{"location":"reference/auth/#ptnad.auth.SSOAuth","title":"ptnad.auth.SSOAuth","text":"<pre><code>SSOAuth(sso_url: str, client_id: str, client_secret: str, username: str, password: str)\n</code></pre> <p>               Bases: <code>AuthStrategy</code></p> Source code in <code>src/ptnad/auth.py</code> <pre><code>def __init__(\n    self,\n    sso_url: str,\n    client_id: str,\n    client_secret: str,\n    username: str,\n    password: str\n) -&gt; None:\n    self.sso_url = sso_url\n    self.client_id = client_id\n    self.client_secret = client_secret\n    self.username = username\n    self.password = password\n</code></pre>"},{"location":"reference/auth/#ptnad.auth.Auth","title":"ptnad.auth.Auth","text":"<pre><code>Auth(client: Any)\n</code></pre> Source code in <code>src/ptnad/auth.py</code> <pre><code>def __init__(self, client: Any) -&gt; None:\n    self.client = client\n    self.strategy: Optional[AuthStrategy] = None\n</code></pre>"},{"location":"reference/client/","title":"Client","text":""},{"location":"reference/client/#ptnad.client.PTNADClient","title":"ptnad.client.PTNADClient","text":"<pre><code>PTNADClient(base_url: str, verify_ssl: bool = True)\n</code></pre> Source code in <code>src/ptnad/client.py</code> <pre><code>def __init__(self, base_url: str, verify_ssl: bool = True):\n    self.base_url = base_url.rstrip('/') + '/api/v2/'\n    self.verify_ssl = verify_ssl\n    self.session = requests.Session()\n    self.session.verify = self.verify_ssl\n    if not self.verify_ssl:\n        warnings.simplefilter('ignore', InsecureRequestWarning)\n    self.csrf_token = None\n    self.auth = Auth(self)\n    self.monitoring = MonitoringAPI(self)\n    self.signatures = SignaturesAPI(self)\n    self.replists = RepListsAPI(self)\n    self.bql = BQLAPI(self)\n</code></pre>"},{"location":"reference/exceptions/","title":"Exception","text":""},{"location":"reference/exceptions/#ptnad.exceptions.PTNADException","title":"ptnad.exceptions.PTNADException","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all PTNAD-related errors.</p>"},{"location":"reference/exceptions/#ptnad.exceptions.PTNADAPIError","title":"ptnad.exceptions.PTNADAPIError","text":"<pre><code>PTNADAPIError(message, status_code=None, response=None, operation=None)\n</code></pre> <p>               Bases: <code>PTNADException</code></p> <p>Exception raised for errors in the API.</p> Source code in <code>src/ptnad/exceptions.py</code> <pre><code>def __init__(self, message, status_code=None, response=None, operation=None):\n    self.message = message\n    self.status_code = status_code\n    self.response = response\n    self.operation = operation\n\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/exceptions/#ptnad.exceptions.AuthenticationError","title":"ptnad.exceptions.AuthenticationError","text":"<p>               Bases: <code>PTNADException</code></p> <p>Exception raised for authentication errors.</p>"},{"location":"reference/exceptions/#ptnad.exceptions.ValidationError","title":"ptnad.exceptions.ValidationError","text":"<p>               Bases: <code>PTNADException</code></p> <p>Exception raised for validation errors.</p>"},{"location":"reference/api/","title":"Init","text":""},{"location":"reference/api/#ptnad.api.BQLAPI","title":"ptnad.api.BQLAPI","text":"<pre><code>BQLAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>execute</code> <p>Execute a BQL query on a specific source.</p> <code>execute_raw</code> <p>Execute a BQL query on a specific source and return the full response.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def __init__(self, client):\n    self.client = client\n</code></pre>"},{"location":"reference/api/#ptnad.api.BQLAPI.execute","title":"execute","text":"<pre><code>execute(query: str, source: str = '2') -&gt; Any\n</code></pre> <p>Execute a BQL query on a specific source.</p> <p>Args:     query (str): The BQL query to execute.     source (str): The identifier of the storage to query. Defaults to \"2\" (live).</p> <p>Returns:     Any: The result of the query execution.</p> <p>Raises:     PTNADAPIError: If there's an error executing the query.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def execute(self, query: str, source: str = \"2\") -&gt; Any:\n    \"\"\"\n    Execute a BQL query on a specific source.\n\n    Args:\n        query (str): The BQL query to execute.\n        source (str): The identifier of the storage to query. Defaults to \"2\" (live).\n\n    Returns:\n        Any: The result of the query execution.\n\n    Raises:\n        PTNADAPIError: If there's an error executing the query.\n    \"\"\"\n    try:\n        response = self._send_query(query, source)\n        return response['result']\n    except PTNADAPIError as e:\n        e.operation = \"execute BQL query\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to execute BQL query: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.BQLAPI.execute_raw","title":"execute_raw","text":"<pre><code>execute_raw(query: str, source: str = '2') -&gt; BQLResponse\n</code></pre> <p>Execute a BQL query on a specific source and return the full response.</p> <p>Args:     query (str): The BQL query to execute.     source (str): The identifier of the storage to query. Defaults to \"2\" (live).</p> <p>Returns:     BQLResponse: An object containing the query results, execution time, total hits, and debug info.</p> <p>Raises:     PTNADAPIError: If there's an error executing the query.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def execute_raw(self, query: str, source: str = \"2\") -&gt; BQLResponse:\n    \"\"\"\n    Execute a BQL query on a specific source and return the full response.\n\n    Args:\n        query (str): The BQL query to execute.\n        source (str): The identifier of the storage to query. Defaults to \"2\" (live).\n\n    Returns:\n        BQLResponse: An object containing the query results, execution time, total hits, and debug info.\n\n    Raises:\n        PTNADAPIError: If there's an error executing the query.\n    \"\"\"\n    try:\n        response = self._send_query(query, source)\n        return BQLResponse(\n            result=response['result'],\n            took=response['took'],\n            total=response['total'],\n            debug=response.get('debug')\n        )\n    except PTNADAPIError as e:\n        e.operation = \"execute BQL query\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to execute BQL query: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI","title":"ptnad.api.MonitoringAPI","text":"<pre><code>MonitoringAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>get_active_triggers</code> <p>Get all active triggers (triggers with status other than 'green').</p> <code>get_status</code> <p>Get the current status.</p> <code>get_trigger_by_id</code> <p>Get a specific trigger by its ID.</p> <code>get_triggers</code> <p>Get the list of triggers.</p> <code>get_triggers_by_type</code> <p>Get all triggers of a specific type.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, client):\n    self.client = client\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_active_triggers","title":"get_active_triggers","text":"<pre><code>get_active_triggers() -&gt; List[Trigger]\n</code></pre> <p>Get all active triggers (triggers with status other than 'green').</p> <p>Returns:     List[Trigger]: A list of active Trigger objects.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_active_triggers(self) -&gt; List[Trigger]:\n    \"\"\"\n    Get all active triggers (triggers with status other than 'green').\n\n    Returns:\n        List[Trigger]: A list of active Trigger objects.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n    \"\"\"\n    triggers = self.get_triggers()\n    return [trigger for trigger in triggers if trigger.status != 'green']\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_status","title":"get_status","text":"<pre><code>get_status() -&gt; MonitoringStatus\n</code></pre> <p>Get the current status.</p> <p>Returns:     MonitoringStatus: An object containing the current status and any problems.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the status.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_status(self) -&gt; MonitoringStatus:\n    \"\"\"\n    Get the current status.\n\n    Returns:\n        MonitoringStatus: An object containing the current status and any problems.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the status.\n    \"\"\"\n    try:\n        response = self.client.get(\"/monitoring/status\").json()\n        return MonitoringStatus(**response)\n    except PTNADAPIError as e:\n        e.operation = \"get monitoring status\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get monitoring status: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_trigger_by_id","title":"get_trigger_by_id","text":"<pre><code>get_trigger_by_id(trigger_id: str) -&gt; Optional[Trigger]\n</code></pre> <p>Get a specific trigger by its ID.</p> <p>Args:     trigger_id (str): The ID of the trigger to retrieve.</p> <p>Returns:     Optional[Trigger]: The Trigger object if found, None otherwise.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the trigger.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_trigger_by_id(self, trigger_id: str) -&gt; Optional[Trigger]:\n    \"\"\"\n    Get a specific trigger by its ID.\n\n    Args:\n        trigger_id (str): The ID of the trigger to retrieve.\n\n    Returns:\n        Optional[Trigger]: The Trigger object if found, None otherwise.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the trigger.\n    \"\"\"\n    triggers = self.get_triggers()\n    return next((trigger for trigger in triggers if trigger.id == trigger_id), None)\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_triggers","title":"get_triggers","text":"<pre><code>get_triggers() -&gt; List[Trigger]\n</code></pre> <p>Get the list of triggers.</p> <p>Returns:     List[Trigger]: A list of Trigger objects.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_triggers(self) -&gt; List[Trigger]:\n    \"\"\"\n    Get the list of triggers.\n\n    Returns:\n        List[Trigger]: A list of Trigger objects.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n    \"\"\"\n    try:\n        response = self.client.get(\"/monitoring/triggers\").json()\n        return [Trigger(**trigger) for trigger in response.get('results', [])]\n    except PTNADAPIError as e:\n        e.operation = \"get triggers\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get triggers: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.MonitoringAPI.get_triggers_by_type","title":"get_triggers_by_type","text":"<pre><code>get_triggers_by_type(trigger_type: str) -&gt; List[Trigger]\n</code></pre> <p>Get all triggers of a specific type.</p> <p>Args:     trigger_type (str): The type of triggers to retrieve.</p> <p>Returns:     List[Trigger]: A list of Trigger objects of the specified type.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_triggers_by_type(self, trigger_type: str) -&gt; List[Trigger]:\n    \"\"\"\n    Get all triggers of a specific type.\n\n    Args:\n        trigger_type (str): The type of triggers to retrieve.\n\n    Returns:\n        List[Trigger]: A list of Trigger objects of the specified type.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n    \"\"\"\n    triggers = self.get_triggers()\n    return [trigger for trigger in triggers if trigger.type == trigger_type]\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI","title":"ptnad.api.RepListsAPI","text":"<pre><code>RepListsAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>add_dynamic_list_item</code> <p>Add an item to a dynamic reputation list.</p> <code>bulk_add_items</code> <p>Add multiple items to a dynamic reputation list.</p> <code>bulk_delete_items</code> <p>Delete multiple items from a dynamic reputation list.</p> <code>create_list</code> <p>Create a new reputation list.</p> <code>delete_list</code> <p>Delete a reputation list.</p> <code>get_all_lists</code> <p>Get all reputation lists using pagination.</p> <code>get_dynamic_list_items</code> <p>Get items from a dynamic reputation list.</p> <code>get_list</code> <p>Get information about a specific reputation list.</p> <code>get_lists</code> <p>Get a list of reputation lists.</p> <code>get_stats</code> <p>Get statistics about reputation lists.</p> <code>remove_item</code> <p>Remove an item from a dynamic reputation list.</p> <code>update_list</code> <p>Update a reputation list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def __init__(self, client):\n    self.client = client\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.add_dynamic_list_item","title":"add_dynamic_list_item","text":"<pre><code>add_dynamic_list_item(external_key: str, value: str, attributes: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Add an item to a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     value (str): Value to add to the list.     attributes (Optional[Dict[str, Any]]): Additional attributes for the item.</p> <p>Returns:     Dict[str, Any]: Information about the added item.</p> <p>Raises:     PTNADAPIError: If there's an error adding the item.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def add_dynamic_list_item(self, external_key: str, value: str, attributes: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add an item to a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        value (str): Value to add to the list.\n        attributes (Optional[Dict[str, Any]]): Additional attributes for the item.\n\n    Returns:\n        Dict[str, Any]: Information about the added item.\n\n    Raises:\n        PTNADAPIError: If there's an error adding the item.\n    \"\"\"\n    try:\n        response = self.client.post(f\"/replists/dynamic/{external_key}/{value}\", json=attributes or {})\n        if response.status_code in (200, 201):\n            return response.json()\n        else:\n            raise PTNADAPIError(f\"Failed to add item to reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"add item to reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to add item to reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.bulk_add_items","title":"bulk_add_items","text":"<pre><code>bulk_add_items(external_key: str, items: List[Dict[str, Any]]) -&gt; None\n</code></pre> <p>Add multiple items to a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     items (List[Dict[str, Any]]): List of items to add, each item should have 'value' and optionally 'attrs'.</p> <p>Raises:     PTNADAPIError: If there's an error adding the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def bulk_add_items(self, external_key: str, items: List[Dict[str, Any]]) -&gt; None:\n    \"\"\"\n    Add multiple items to a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        items (List[Dict[str, Any]]): List of items to add, each item should have 'value' and optionally 'attrs'.\n\n    Raises:\n        PTNADAPIError: If there's an error adding the items.\n    \"\"\"\n    try:\n        self.client.post(f\"/replists/dynamic/{external_key}/_bulk\", json=items)\n    except PTNADAPIError as e:\n        e.operation = f\"bulk add items to reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to bulk add items to reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.bulk_delete_items","title":"bulk_delete_items","text":"<pre><code>bulk_delete_items(external_key: str, values: List[str]) -&gt; None\n</code></pre> <p>Delete multiple items from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     values (List[str]): List of values to delete from the list.</p> <p>Raises:     PTNADAPIError: If there's an error deleting the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def bulk_delete_items(self, external_key: str, values: List[str]) -&gt; None:\n    \"\"\"\n    Delete multiple items from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        values (List[str]): List of values to delete from the list.\n\n    Raises:\n        PTNADAPIError: If there's an error deleting the items.\n    \"\"\"\n    try:\n        response = self.client.post(f\"/replists/dynamic/{external_key}/_delete\", json=values)\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to bulk delete items from reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"bulk delete items from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to bulk delete items from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.create_list","title":"create_list","text":"<pre><code>create_list(name: str, type: str, color: str, description: Optional[str] = None, content: Optional[str] = None, external_key: Optional[str] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new reputation list.</p> <p>Args:     name (str): Name of the reputation list. Must be a valid slug (letters, numbers, underscores, hyphens).     type (str): Type of the reputation list ('ip', 'dn', 'uri', or 'md5').     color (str): Color code for the reputation list ('0' to '7').     description (Optional[str]): Description of the reputation list.     content (Optional[str]): Content of the reputation list.     external_key (Optional[str]): External key for the reputation list.</p> <p>Returns:     Dict[str, Any]: Information about the created reputation list.</p> <p>Raises:     ValidationError: If the input parameters are invalid.     PTNADAPIError: If there's an error creating the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def create_list(self, name: str, type: str, color: str, description: Optional[str] = None,\n                content: Optional[str] = None, external_key: Optional[str] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new reputation list.\n\n    Args:\n        name (str): Name of the reputation list. Must be a valid slug (letters, numbers, underscores, hyphens).\n        type (str): Type of the reputation list ('ip', 'dn', 'uri', or 'md5').\n        color (str): Color code for the reputation list ('0' to '7').\n        description (Optional[str]): Description of the reputation list.\n        content (Optional[str]): Content of the reputation list.\n        external_key (Optional[str]): External key for the reputation list.\n\n    Returns:\n        Dict[str, Any]: Information about the created reputation list.\n\n    Raises:\n        ValidationError: If the input parameters are invalid.\n        PTNADAPIError: If there's an error creating the list.\n    \"\"\"\n    if not self._is_valid_slug(name):\n        raise ValidationError(\"Name must be a valid slug consisting of letters, numbers, underscores or hyphens.\")\n\n    data = {\n        \"name\": name,\n        \"type\": type,\n        \"color\": color\n    }\n    if description:\n        data[\"description\"] = description\n    if content:\n        data[\"content\"] = content\n    if external_key:\n        data[\"external_key\"] = external_key\n\n    try:\n        response = self.client.post(\"/replists\", json=data)\n        if response.status_code == 201:\n            return response.json()\n        else:\n            error_message = response.json() if response.headers.get('Content-Type') == 'application/json' else response.text\n            raise PTNADAPIError(f\"Failed to create reputation list. Status code: {response.status_code}. Error: {error_message}\")\n    except PTNADAPIError as e:\n        e.operation = \"create reputation list\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to create reputation list: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.delete_list","title":"delete_list","text":"<pre><code>delete_list(list_id: int) -&gt; None\n</code></pre> <p>Delete a reputation list.</p> <p>Args:     list_id (int): ID of the reputation list to delete.</p> <p>Raises:     PTNADAPIError: If there's an error deleting the reputation list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def delete_list(self, list_id: int) -&gt; None:\n    \"\"\"\n    Delete a reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list to delete.\n\n    Raises:\n        PTNADAPIError: If there's an error deleting the reputation list.\n    \"\"\"\n    try:\n        response = self.client.delete(f\"/replists/{list_id}\")\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to delete reputation list {list_id}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"delete reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to delete reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_all_lists","title":"get_all_lists","text":"<pre><code>get_all_lists(search: Optional[str] = None, ordering: Optional[str] = None, limit: int = 100) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get all reputation lists using pagination.</p> <p>Args:     search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.     ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix with '-' for descending order.     limit (int): Number of lists to fetch per request (default: 100).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing all reputation list information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the lists.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_all_lists(self, search: Optional[str] = None, ordering: Optional[str] = None,\n                  limit: int = 100) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get all reputation lists using pagination.\n\n    Args:\n        search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.\n        ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix with '-' for descending order.\n        limit (int): Number of lists to fetch per request (default: 100).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing all reputation list information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the lists.\n    \"\"\"\n    all_lists = []\n    offset = 0\n\n    while True:\n        response = self._get_lists_data(search, ordering, limit, offset)\n        lists = response['results']\n        all_lists.extend(lists)\n\n        if response['next'] is None:\n            break\n\n        offset += limit\n\n    return all_lists\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_dynamic_list_items","title":"get_dynamic_list_items","text":"<pre><code>get_dynamic_list_items(external_key: str, ordering: Optional[str] = None) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get items from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     ordering (Optional[str]): Field to sort the results by (value or modified).</p> <p>Returns:     List[Dict[str, Any]]: List of items in the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_dynamic_list_items(self, external_key: str, ordering: Optional[str] = None) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get items from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        ordering (Optional[str]): Field to sort the results by (value or modified).\n\n    Returns:\n        List[Dict[str, Any]]: List of items in the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the items.\n    \"\"\"\n    params = {}\n    if ordering:\n        params['ordering'] = ordering\n\n    try:\n        response = self.client.get(f\"/replists/dynamic/{external_key}\", params=params).json()\n        return response['results']\n    except PTNADAPIError as e:\n        e.operation = f\"get items from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get items from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_list","title":"get_list","text":"<pre><code>get_list(list_id: int) -&gt; Dict[str, Any]\n</code></pre> <p>Get information about a specific reputation list.</p> <p>Args:     list_id (int): ID of the reputation list.</p> <p>Returns:     Dict[str, Any]: Information about the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_list(self, list_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get information about a specific reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list.\n\n    Returns:\n        Dict[str, Any]: Information about the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the list.\n    \"\"\"\n    try:\n        response = self.client.get(f\"/replists/{list_id}\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"get reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_lists","title":"get_lists","text":"<pre><code>get_lists(search: Optional[str] = None, ordering: Optional[str] = None, limit: int = 100, offset: int = 0) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of reputation lists.</p> <p>Args:     search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.     ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix '-' for descending order.     limit (int): Maximum number of lists to return (default: 100).     offset (int): Number of lists to skip (default: 0).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing reputation list information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the lists.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_lists(self, search: Optional[str] = None, ordering: Optional[str] = None,\n              limit: int = 100, offset: int = 0) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of reputation lists.\n\n    Args:\n        search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.\n        ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix '-' for descending order.\n        limit (int): Maximum number of lists to return (default: 100).\n        offset (int): Number of lists to skip (default: 0).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing reputation list information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the lists.\n    \"\"\"\n    response = self._get_lists_data(search, ordering, limit, offset)\n    return response['results']\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Dict[str, Any]\n</code></pre> <p>Get statistics about reputation lists.</p> <p>Returns:     Dict[str, Any]: Statistics about reputation lists.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the statistics.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_stats(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get statistics about reputation lists.\n\n    Returns:\n        Dict[str, Any]: Statistics about reputation lists.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the statistics.\n    \"\"\"\n    try:\n        response = self.client.get(\"/replists/stats\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = \"get reputation lists statistics\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get reputation lists statistics: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.remove_item","title":"remove_item","text":"<pre><code>remove_item(external_key: str, value: str) -&gt; None\n</code></pre> <p>Remove an item from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     value (str): Value to remove from the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error removing the item.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def remove_item(self, external_key: str, value: str) -&gt; None:\n    \"\"\"\n    Remove an item from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        value (str): Value to remove from the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error removing the item.\n    \"\"\"\n    try:\n        response = self.client.delete(f\"/replists/dynamic/{external_key}/{value}\")\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to remove item from reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"remove item from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to remove item from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.RepListsAPI.update_list","title":"update_list","text":"<pre><code>update_list(list_id: int, **kwargs) -&gt; Dict[str, Any]\n</code></pre> <p>Update a reputation list.</p> <p>Args:     list_id (int): ID of the reputation list to update.     **kwargs: Fields to update (color, name, type, description, content).</p> <p>Returns:     Dict[str, Any]: Updated information about the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error updating the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def update_list(self, list_id: int, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update a reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list to update.\n        **kwargs: Fields to update (color, name, type, description, content).\n\n    Returns:\n        Dict[str, Any]: Updated information about the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error updating the list.\n    \"\"\"\n    try:\n        response = self.client.patch(f\"/replists/{list_id}\", json=kwargs).json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"update reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to update reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI","title":"ptnad.api.SignaturesAPI","text":"<pre><code>SignaturesAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>apply_changes</code> <p>Apply changes made to Rules and commit them to sensors.</p> <code>get_all_rules</code> <p>Get all Rules using pagination.</p> <code>get_classes</code> <p>Get a list of signature classes.</p> <code>get_rule</code> <p>Get information about a specific Rule.</p> <code>get_rules</code> <p>Get a list of Rules.</p> <code>get_stats</code> <p>Get statistics about Rules.</p> <code>revert_changes</code> <p>Revert changes made to Rules.</p> <code>update_rule</code> <p>Update a Rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def __init__(self, client):\n    self.client = client\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.apply_changes","title":"apply_changes","text":"<pre><code>apply_changes() -&gt; Dict[str, str]\n</code></pre> <p>Apply changes made to Rules and commit them to sensors.</p> <p>Returns:     Dict[str, str]: A dictionary with the hashsum of the package.</p> <p>Raises:     PTNADAPIError: If there's an error applying the changes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def apply_changes(self) -&gt; Dict[str, str]:\n    \"\"\"\n    Apply changes made to Rules and commit them to sensors.\n\n    Returns:\n        Dict[str, str]: A dictionary with the hashsum of the package.\n\n    Raises:\n        PTNADAPIError: If there's an error applying the changes.\n    \"\"\"\n    try:\n        response = self.client.post(\"/signatures/commit\").json()\n        if \"hashsum\" in response:\n            return response\n        elif \"fatal_error\" in response or \"other_errors\" in response:\n            errors = []\n            if \"fatal_error\" in response and response[\"fatal_error\"]:\n                errors.append(response[\"fatal_error\"])\n            if \"other_errors\" in response and response[\"other_errors\"]:\n                errors.extend(response[\"other_errors\"])\n            raise PTNADAPIError(f\"Failed to commit signature changes: {', '.join(errors)}\")\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"commit signature changes: {', '.join(errors)}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to apply Rule changes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.get_all_rules","title":"get_all_rules","text":"<pre><code>get_all_rules(search: Optional[str] = None, ordering: Optional[str] = None, limit: int = 100, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get all Rules using pagination.</p> <p>Args:     search (Optional[str]): Keyword to filter the rules.     ordering (Optional[str]): Field to sort the results by.     limit (int): Number of rules to fetch per request (default: 100).     *filters: Additional filters. Available filters:         sid: Filter by sid (can be a single value or a list)         sid__gte: sid greater than or equal to         sid__lt: sid less than         vendor: Filter by vendor name (can be a single value or a list)         enabled: Filter by enabled status (true or false)         has_redef: Filter by has_redef status (true or false)         has_exceptions: Filter by has_exceptions status (true or false)         priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)         cls: Filter by class name (can be a single value or a list)         diff: Filter by rule changes, valid values (can be a list): added (+), updated (), removed (-), unchanged (=)         has_error: Filter by has_error status (true or false)         client: Search for IP address in src_adr and dst_adr         server: Search for IP address in src_adr and dst_adr</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing all Rule information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rules.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_all_rules(self, search: Optional[str] = None, ordering: Optional[str] = None,\n                  limit: int = 100, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get all Rules using pagination.\n\n    Args:\n        search (Optional[str]): Keyword to filter the rules.\n        ordering (Optional[str]): Field to sort the results by.\n        limit (int): Number of rules to fetch per request (default: 100).\n        **filters: Additional filters. Available filters:\n            sid: Filter by sid (can be a single value or a list)\n            sid__gte: sid greater than or equal to\n            sid__lt: sid less than\n            vendor: Filter by vendor name (can be a single value or a list)\n            enabled: Filter by enabled status (true or false)\n            has_redef: Filter by has_redef status (true or false)\n            has_exceptions: Filter by has_exceptions status (true or false)\n            priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)\n            cls: Filter by class name (can be a single value or a list)\n            diff: Filter by rule changes, valid values (can be a list): added (+), updated (*), removed (-), unchanged (=)\n            has_error: Filter by has_error status (true or false)\n            client: Search for IP address in src_adr and dst_adr\n            server: Search for IP address in src_adr and dst_adr\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing all Rule information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rules.\n    \"\"\"\n    all_rules = []\n    offset = 0\n\n    while True:\n        response = self._get_rules_data(search, ordering, limit, offset, **filters)\n        rules = response['results']\n        all_rules.extend(rules)\n\n        if response['next'] is None:\n            break\n\n        offset += limit\n\n    return all_rules\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.get_classes","title":"get_classes","text":"<pre><code>get_classes(search: Optional[str] = None, ordering: Optional[str] = None, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of signature classes.</p> <p>Args:     search (Optional[str]): Keyword to filter the classes.     ordering (Optional[str]): Field to sort the results by.     **filters: Additional filters (name, title, priority).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing signature class information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the classes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_classes(self, search: Optional[str] = None, ordering: Optional[str] = None, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of signature classes.\n\n    Args:\n        search (Optional[str]): Keyword to filter the classes.\n        ordering (Optional[str]): Field to sort the results by.\n        **filters: Additional filters (name, title, priority).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing signature class information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the classes.\n    \"\"\"\n    params = {k: v for k, v in filters.items() if v is not None}\n    if search:\n        params['search'] = search\n    if ordering:\n        params['ordering'] = ordering\n\n    try:\n        response = self.client.get(\"/signatures/classes\", params=params).json()\n        return response['results']\n    except PTNADAPIError as e:\n        e.operation = \"get signature classes\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get signature classes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.get_rule","title":"get_rule","text":"<pre><code>get_rule(rule_id: int) -&gt; Dict[str, Any]\n</code></pre> <p>Get information about a specific Rule.</p> <p>Args:     rule_id (int): sid of the Rule.</p> <p>Returns:     Dict[str, Any]: Information about the Rule.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_rule(self, rule_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get information about a specific Rule.\n\n    Args:\n        rule_id (int): sid of the Rule.\n\n    Returns:\n        Dict[str, Any]: Information about the Rule.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rule.\n    \"\"\"\n    try:\n        response = self.client.get(f\"/signatures/rules/{rule_id}\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"get Rule {rule_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get rule {rule_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.get_rules","title":"get_rules","text":"<pre><code>get_rules(search: Optional[str] = None, ordering: Optional[str] = None, limit: int = 100, offset: int = 0, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of Rules.</p> <p>Args:     search (Optional[str]): Keyword to filter the rules.     ordering (Optional[str]): Field to sort the results by.     limit (int): Maximum number of rules to return (default: 100).     offset (int): Number of rules to skip (default: 0).     *filters: Additional filters. Available filters:         sid: Filter by sid (can be a single value or a list)         sid__gte: sid greater than or equal to         sid__lt: sid less than         vendor: Filter by vendor name (can be a single value or a list)         enabled: Filter by enabled status (true or false)         has_redef: Filter by has_redef status (true or false)         has_exceptions: Filter by has_exceptions status (true or false)         priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)         cls: Filter by class name (can be a single value or a list)         diff: Filter by rule changes, valid values (can be a list): added (+), updated (), removed (-), unchanged (=). Available in 12.2+         has_error: Filter by has_error status (true or false)         client: Search for IP address in src_adr and dst_adr         server: Search for IP address in src_adr and dst_adr</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing Rule information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rules.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_rules(self, search: Optional[str] = None, ordering: Optional[str] = None,\n              limit: int = 100, offset: int = 0, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of Rules.\n\n    Args:\n        search (Optional[str]): Keyword to filter the rules.\n        ordering (Optional[str]): Field to sort the results by.\n        limit (int): Maximum number of rules to return (default: 100).\n        offset (int): Number of rules to skip (default: 0).\n        **filters: Additional filters. Available filters:\n            sid: Filter by sid (can be a single value or a list)\n            sid__gte: sid greater than or equal to\n            sid__lt: sid less than\n            vendor: Filter by vendor name (can be a single value or a list)\n            enabled: Filter by enabled status (true or false)\n            has_redef: Filter by has_redef status (true or false)\n            has_exceptions: Filter by has_exceptions status (true or false)\n            priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)\n            cls: Filter by class name (can be a single value or a list)\n            diff: Filter by rule changes, valid values (can be a list): added (+), updated (*), removed (-), unchanged (=). Available in 12.2+\n            has_error: Filter by has_error status (true or false)\n            client: Search for IP address in src_adr and dst_adr\n            server: Search for IP address in src_adr and dst_adr\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing Rule information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rules.\n    \"\"\"\n    response = self._get_rules_data(search, ordering, limit, offset, **filters)\n    return response['results']\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Dict[str, Any]\n</code></pre> <p>Get statistics about Rules.</p> <p>Returns:     Dict[str, Any]: Statistics about Rules.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the statistics.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_stats(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get statistics about Rules.\n\n    Returns:\n        Dict[str, Any]: Statistics about Rules.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the statistics.\n    \"\"\"\n    try:\n        response = self.client.get(\"/signatures/stats\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = \"get Rules statistics\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get Rules statistics: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.revert_changes","title":"revert_changes","text":"<pre><code>revert_changes() -&gt; None\n</code></pre> <p>Revert changes made to Rules.</p> <p>Raises:     PTNADAPIError: If there's an error reverting the changes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def revert_changes(self) -&gt; None:\n    \"\"\"\n    Revert changes made to Rules.\n\n    Raises:\n        PTNADAPIError: If there's an error reverting the changes.\n    \"\"\"\n    try:\n        self.client.post(\"/signatures/rollback\")\n    except PTNADAPIError as e:\n        e.operation = \"revert Rule changes\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to revert Rule changes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/#ptnad.api.SignaturesAPI.update_rule","title":"update_rule","text":"<pre><code>update_rule(rule_id: int, **kwargs) -&gt; Dict[str, Any]\n</code></pre> <p>Update a Rule.</p> <p>Args:     rule_id (int): ID of the Rule to update.     **kwargs: Fields to update (enabled, action, msg, etc.).</p> <p>Returns:     Dict[str, Any]: Updated information about the Rule.</p> <p>Raises:     PTNADAPIError: If there's an error updating the rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def update_rule(self, rule_id: int, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update a Rule.\n\n    Args:\n        rule_id (int): ID of the Rule to update.\n        **kwargs: Fields to update (enabled, action, msg, etc.).\n\n    Returns:\n        Dict[str, Any]: Updated information about the Rule.\n\n    Raises:\n        PTNADAPIError: If there's an error updating the rule.\n    \"\"\"\n    try:\n        response = self.client.patch(f\"/signatures/rules/{rule_id}\", json=kwargs).json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"update Rule {rule_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to update Rule {rule_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/bql/","title":"BQL","text":""},{"location":"reference/api/bql/#ptnad.api.bql.BQLAPI","title":"ptnad.api.bql.BQLAPI","text":"<pre><code>BQLAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>execute</code> <p>Execute a BQL query on a specific source.</p> <code>execute_raw</code> <p>Execute a BQL query on a specific source and return the full response.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def __init__(self, client):\n    self.client = client\n</code></pre>"},{"location":"reference/api/bql/#ptnad.api.bql.BQLAPI.execute","title":"execute","text":"<pre><code>execute(query: str, source: str = '2') -&gt; Any\n</code></pre> <p>Execute a BQL query on a specific source.</p> <p>Args:     query (str): The BQL query to execute.     source (str): The identifier of the storage to query. Defaults to \"2\" (live).</p> <p>Returns:     Any: The result of the query execution.</p> <p>Raises:     PTNADAPIError: If there's an error executing the query.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def execute(self, query: str, source: str = \"2\") -&gt; Any:\n    \"\"\"\n    Execute a BQL query on a specific source.\n\n    Args:\n        query (str): The BQL query to execute.\n        source (str): The identifier of the storage to query. Defaults to \"2\" (live).\n\n    Returns:\n        Any: The result of the query execution.\n\n    Raises:\n        PTNADAPIError: If there's an error executing the query.\n    \"\"\"\n    try:\n        response = self._send_query(query, source)\n        return response['result']\n    except PTNADAPIError as e:\n        e.operation = \"execute BQL query\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to execute BQL query: {str(e)}\")\n</code></pre>"},{"location":"reference/api/bql/#ptnad.api.bql.BQLAPI.execute_raw","title":"execute_raw","text":"<pre><code>execute_raw(query: str, source: str = '2') -&gt; BQLResponse\n</code></pre> <p>Execute a BQL query on a specific source and return the full response.</p> <p>Args:     query (str): The BQL query to execute.     source (str): The identifier of the storage to query. Defaults to \"2\" (live).</p> <p>Returns:     BQLResponse: An object containing the query results, execution time, total hits, and debug info.</p> <p>Raises:     PTNADAPIError: If there's an error executing the query.</p> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def execute_raw(self, query: str, source: str = \"2\") -&gt; BQLResponse:\n    \"\"\"\n    Execute a BQL query on a specific source and return the full response.\n\n    Args:\n        query (str): The BQL query to execute.\n        source (str): The identifier of the storage to query. Defaults to \"2\" (live).\n\n    Returns:\n        BQLResponse: An object containing the query results, execution time, total hits, and debug info.\n\n    Raises:\n        PTNADAPIError: If there's an error executing the query.\n    \"\"\"\n    try:\n        response = self._send_query(query, source)\n        return BQLResponse(\n            result=response['result'],\n            took=response['took'],\n            total=response['total'],\n            debug=response.get('debug')\n        )\n    except PTNADAPIError as e:\n        e.operation = \"execute BQL query\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to execute BQL query: {str(e)}\")\n</code></pre>"},{"location":"reference/api/bql/#ptnad.api.bql.BQLResponse","title":"ptnad.api.bql.BQLResponse","text":"<pre><code>BQLResponse(result: Any, took: int, total: int, debug: Optional[Dict[str, Any]] = None)\n</code></pre> Source code in <code>src/ptnad/api/bql.py</code> <pre><code>def __init__(self, result: Any, took: int, total: int, debug: Optional[Dict[str, Any]] = None):\n    self.result = result\n    self.took = took\n    self.total = total\n    self.debug = debug\n</code></pre>"},{"location":"reference/api/monitoring/","title":"Monitoring","text":""},{"location":"reference/api/monitoring/#ptnad.api.monitoring.Status","title":"ptnad.api.monitoring.Status","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.TriggerType","title":"ptnad.api.monitoring.TriggerType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.Problem","title":"ptnad.api.monitoring.Problem","text":"<pre><code>Problem(status: str, template: str, vars: Dict[str, Any])\n</code></pre> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, status: str, template: str, vars: Dict[str, Any]):\n    self.status = Status(status)\n    self.template = template\n    self.vars = vars\n    self.message = self.template.format(**self.vars)\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringStatus","title":"ptnad.api.monitoring.MonitoringStatus","text":"<pre><code>MonitoringStatus(status: str, problems: List[Dict[str, Any]])\n</code></pre> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, status: str, problems: List[Dict[str, Any]]):\n    self._status = Status(status)\n    self.problems_raw = problems\n    self.problems = [Problem(**prob) for prob in problems]\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.Trigger","title":"ptnad.api.monitoring.Trigger","text":"<pre><code>Trigger(id: str, type: str, status: str, template: str, vars: Dict[str, Any], updated: str)\n</code></pre> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, id: str, type: str, status: str, template: str, vars: Dict[str, Any], updated: str):\n    self.id = id\n    self.type = TriggerType(type)\n    self.status = Status(status)\n    self.template = template\n    self.vars = vars\n    self.updated = updated\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI","title":"ptnad.api.monitoring.MonitoringAPI","text":"<pre><code>MonitoringAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>get_active_triggers</code> <p>Get all active triggers (triggers with status other than 'green').</p> <code>get_status</code> <p>Get the current status.</p> <code>get_trigger_by_id</code> <p>Get a specific trigger by its ID.</p> <code>get_triggers</code> <p>Get the list of triggers.</p> <code>get_triggers_by_type</code> <p>Get all triggers of a specific type.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def __init__(self, client):\n    self.client = client\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_active_triggers","title":"get_active_triggers","text":"<pre><code>get_active_triggers() -&gt; List[Trigger]\n</code></pre> <p>Get all active triggers (triggers with status other than 'green').</p> <p>Returns:     List[Trigger]: A list of active Trigger objects.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_active_triggers(self) -&gt; List[Trigger]:\n    \"\"\"\n    Get all active triggers (triggers with status other than 'green').\n\n    Returns:\n        List[Trigger]: A list of active Trigger objects.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n    \"\"\"\n    triggers = self.get_triggers()\n    return [trigger for trigger in triggers if trigger.status != 'green']\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_status","title":"get_status","text":"<pre><code>get_status() -&gt; MonitoringStatus\n</code></pre> <p>Get the current status.</p> <p>Returns:     MonitoringStatus: An object containing the current status and any problems.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the status.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_status(self) -&gt; MonitoringStatus:\n    \"\"\"\n    Get the current status.\n\n    Returns:\n        MonitoringStatus: An object containing the current status and any problems.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the status.\n    \"\"\"\n    try:\n        response = self.client.get(\"/monitoring/status\").json()\n        return MonitoringStatus(**response)\n    except PTNADAPIError as e:\n        e.operation = \"get monitoring status\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get monitoring status: {str(e)}\")\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_trigger_by_id","title":"get_trigger_by_id","text":"<pre><code>get_trigger_by_id(trigger_id: str) -&gt; Optional[Trigger]\n</code></pre> <p>Get a specific trigger by its ID.</p> <p>Args:     trigger_id (str): The ID of the trigger to retrieve.</p> <p>Returns:     Optional[Trigger]: The Trigger object if found, None otherwise.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the trigger.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_trigger_by_id(self, trigger_id: str) -&gt; Optional[Trigger]:\n    \"\"\"\n    Get a specific trigger by its ID.\n\n    Args:\n        trigger_id (str): The ID of the trigger to retrieve.\n\n    Returns:\n        Optional[Trigger]: The Trigger object if found, None otherwise.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the trigger.\n    \"\"\"\n    triggers = self.get_triggers()\n    return next((trigger for trigger in triggers if trigger.id == trigger_id), None)\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_triggers","title":"get_triggers","text":"<pre><code>get_triggers() -&gt; List[Trigger]\n</code></pre> <p>Get the list of triggers.</p> <p>Returns:     List[Trigger]: A list of Trigger objects.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_triggers(self) -&gt; List[Trigger]:\n    \"\"\"\n    Get the list of triggers.\n\n    Returns:\n        List[Trigger]: A list of Trigger objects.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n    \"\"\"\n    try:\n        response = self.client.get(\"/monitoring/triggers\").json()\n        return [Trigger(**trigger) for trigger in response.get('results', [])]\n    except PTNADAPIError as e:\n        e.operation = \"get triggers\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get triggers: {str(e)}\")\n</code></pre>"},{"location":"reference/api/monitoring/#ptnad.api.monitoring.MonitoringAPI.get_triggers_by_type","title":"get_triggers_by_type","text":"<pre><code>get_triggers_by_type(trigger_type: str) -&gt; List[Trigger]\n</code></pre> <p>Get all triggers of a specific type.</p> <p>Args:     trigger_type (str): The type of triggers to retrieve.</p> <p>Returns:     List[Trigger]: A list of Trigger objects of the specified type.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the triggers.</p> Source code in <code>src/ptnad/api/monitoring.py</code> <pre><code>def get_triggers_by_type(self, trigger_type: str) -&gt; List[Trigger]:\n    \"\"\"\n    Get all triggers of a specific type.\n\n    Args:\n        trigger_type (str): The type of triggers to retrieve.\n\n    Returns:\n        List[Trigger]: A list of Trigger objects of the specified type.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the triggers.\n    \"\"\"\n    triggers = self.get_triggers()\n    return [trigger for trigger in triggers if trigger.type == trigger_type]\n</code></pre>"},{"location":"reference/api/replists/","title":"Replists","text":""},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI","title":"ptnad.api.replists.RepListsAPI","text":"<pre><code>RepListsAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>add_dynamic_list_item</code> <p>Add an item to a dynamic reputation list.</p> <code>bulk_add_items</code> <p>Add multiple items to a dynamic reputation list.</p> <code>bulk_delete_items</code> <p>Delete multiple items from a dynamic reputation list.</p> <code>create_list</code> <p>Create a new reputation list.</p> <code>delete_list</code> <p>Delete a reputation list.</p> <code>get_all_lists</code> <p>Get all reputation lists using pagination.</p> <code>get_dynamic_list_items</code> <p>Get items from a dynamic reputation list.</p> <code>get_list</code> <p>Get information about a specific reputation list.</p> <code>get_lists</code> <p>Get a list of reputation lists.</p> <code>get_stats</code> <p>Get statistics about reputation lists.</p> <code>remove_item</code> <p>Remove an item from a dynamic reputation list.</p> <code>update_list</code> <p>Update a reputation list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def __init__(self, client):\n    self.client = client\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.add_dynamic_list_item","title":"add_dynamic_list_item","text":"<pre><code>add_dynamic_list_item(external_key: str, value: str, attributes: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Add an item to a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     value (str): Value to add to the list.     attributes (Optional[Dict[str, Any]]): Additional attributes for the item.</p> <p>Returns:     Dict[str, Any]: Information about the added item.</p> <p>Raises:     PTNADAPIError: If there's an error adding the item.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def add_dynamic_list_item(self, external_key: str, value: str, attributes: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Add an item to a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        value (str): Value to add to the list.\n        attributes (Optional[Dict[str, Any]]): Additional attributes for the item.\n\n    Returns:\n        Dict[str, Any]: Information about the added item.\n\n    Raises:\n        PTNADAPIError: If there's an error adding the item.\n    \"\"\"\n    try:\n        response = self.client.post(f\"/replists/dynamic/{external_key}/{value}\", json=attributes or {})\n        if response.status_code in (200, 201):\n            return response.json()\n        else:\n            raise PTNADAPIError(f\"Failed to add item to reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"add item to reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to add item to reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.bulk_add_items","title":"bulk_add_items","text":"<pre><code>bulk_add_items(external_key: str, items: List[Dict[str, Any]]) -&gt; None\n</code></pre> <p>Add multiple items to a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     items (List[Dict[str, Any]]): List of items to add, each item should have 'value' and optionally 'attrs'.</p> <p>Raises:     PTNADAPIError: If there's an error adding the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def bulk_add_items(self, external_key: str, items: List[Dict[str, Any]]) -&gt; None:\n    \"\"\"\n    Add multiple items to a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        items (List[Dict[str, Any]]): List of items to add, each item should have 'value' and optionally 'attrs'.\n\n    Raises:\n        PTNADAPIError: If there's an error adding the items.\n    \"\"\"\n    try:\n        self.client.post(f\"/replists/dynamic/{external_key}/_bulk\", json=items)\n    except PTNADAPIError as e:\n        e.operation = f\"bulk add items to reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to bulk add items to reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.bulk_delete_items","title":"bulk_delete_items","text":"<pre><code>bulk_delete_items(external_key: str, values: List[str]) -&gt; None\n</code></pre> <p>Delete multiple items from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     values (List[str]): List of values to delete from the list.</p> <p>Raises:     PTNADAPIError: If there's an error deleting the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def bulk_delete_items(self, external_key: str, values: List[str]) -&gt; None:\n    \"\"\"\n    Delete multiple items from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        values (List[str]): List of values to delete from the list.\n\n    Raises:\n        PTNADAPIError: If there's an error deleting the items.\n    \"\"\"\n    try:\n        response = self.client.post(f\"/replists/dynamic/{external_key}/_delete\", json=values)\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to bulk delete items from reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"bulk delete items from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to bulk delete items from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.create_list","title":"create_list","text":"<pre><code>create_list(name: str, type: str, color: str, description: Optional[str] = None, content: Optional[str] = None, external_key: Optional[str] = None) -&gt; Dict[str, Any]\n</code></pre> <p>Create a new reputation list.</p> <p>Args:     name (str): Name of the reputation list. Must be a valid slug (letters, numbers, underscores, hyphens).     type (str): Type of the reputation list ('ip', 'dn', 'uri', or 'md5').     color (str): Color code for the reputation list ('0' to '7').     description (Optional[str]): Description of the reputation list.     content (Optional[str]): Content of the reputation list.     external_key (Optional[str]): External key for the reputation list.</p> <p>Returns:     Dict[str, Any]: Information about the created reputation list.</p> <p>Raises:     ValidationError: If the input parameters are invalid.     PTNADAPIError: If there's an error creating the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def create_list(self, name: str, type: str, color: str, description: Optional[str] = None,\n                content: Optional[str] = None, external_key: Optional[str] = None) -&gt; Dict[str, Any]:\n    \"\"\"\n    Create a new reputation list.\n\n    Args:\n        name (str): Name of the reputation list. Must be a valid slug (letters, numbers, underscores, hyphens).\n        type (str): Type of the reputation list ('ip', 'dn', 'uri', or 'md5').\n        color (str): Color code for the reputation list ('0' to '7').\n        description (Optional[str]): Description of the reputation list.\n        content (Optional[str]): Content of the reputation list.\n        external_key (Optional[str]): External key for the reputation list.\n\n    Returns:\n        Dict[str, Any]: Information about the created reputation list.\n\n    Raises:\n        ValidationError: If the input parameters are invalid.\n        PTNADAPIError: If there's an error creating the list.\n    \"\"\"\n    if not self._is_valid_slug(name):\n        raise ValidationError(\"Name must be a valid slug consisting of letters, numbers, underscores or hyphens.\")\n\n    data = {\n        \"name\": name,\n        \"type\": type,\n        \"color\": color\n    }\n    if description:\n        data[\"description\"] = description\n    if content:\n        data[\"content\"] = content\n    if external_key:\n        data[\"external_key\"] = external_key\n\n    try:\n        response = self.client.post(\"/replists\", json=data)\n        if response.status_code == 201:\n            return response.json()\n        else:\n            error_message = response.json() if response.headers.get('Content-Type') == 'application/json' else response.text\n            raise PTNADAPIError(f\"Failed to create reputation list. Status code: {response.status_code}. Error: {error_message}\")\n    except PTNADAPIError as e:\n        e.operation = \"create reputation list\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to create reputation list: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.delete_list","title":"delete_list","text":"<pre><code>delete_list(list_id: int) -&gt; None\n</code></pre> <p>Delete a reputation list.</p> <p>Args:     list_id (int): ID of the reputation list to delete.</p> <p>Raises:     PTNADAPIError: If there's an error deleting the reputation list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def delete_list(self, list_id: int) -&gt; None:\n    \"\"\"\n    Delete a reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list to delete.\n\n    Raises:\n        PTNADAPIError: If there's an error deleting the reputation list.\n    \"\"\"\n    try:\n        response = self.client.delete(f\"/replists/{list_id}\")\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to delete reputation list {list_id}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"delete reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to delete reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_all_lists","title":"get_all_lists","text":"<pre><code>get_all_lists(search: Optional[str] = None, ordering: Optional[str] = None, limit: int = 100) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get all reputation lists using pagination.</p> <p>Args:     search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.     ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix with '-' for descending order.     limit (int): Number of lists to fetch per request (default: 100).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing all reputation list information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the lists.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_all_lists(self, search: Optional[str] = None, ordering: Optional[str] = None,\n                  limit: int = 100) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get all reputation lists using pagination.\n\n    Args:\n        search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.\n        ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix with '-' for descending order.\n        limit (int): Number of lists to fetch per request (default: 100).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing all reputation list information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the lists.\n    \"\"\"\n    all_lists = []\n    offset = 0\n\n    while True:\n        response = self._get_lists_data(search, ordering, limit, offset)\n        lists = response['results']\n        all_lists.extend(lists)\n\n        if response['next'] is None:\n            break\n\n        offset += limit\n\n    return all_lists\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_dynamic_list_items","title":"get_dynamic_list_items","text":"<pre><code>get_dynamic_list_items(external_key: str, ordering: Optional[str] = None) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get items from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     ordering (Optional[str]): Field to sort the results by (value or modified).</p> <p>Returns:     List[Dict[str, Any]]: List of items in the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the items.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_dynamic_list_items(self, external_key: str, ordering: Optional[str] = None) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get items from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        ordering (Optional[str]): Field to sort the results by (value or modified).\n\n    Returns:\n        List[Dict[str, Any]]: List of items in the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the items.\n    \"\"\"\n    params = {}\n    if ordering:\n        params['ordering'] = ordering\n\n    try:\n        response = self.client.get(f\"/replists/dynamic/{external_key}\", params=params).json()\n        return response['results']\n    except PTNADAPIError as e:\n        e.operation = f\"get items from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get items from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_list","title":"get_list","text":"<pre><code>get_list(list_id: int) -&gt; Dict[str, Any]\n</code></pre> <p>Get information about a specific reputation list.</p> <p>Args:     list_id (int): ID of the reputation list.</p> <p>Returns:     Dict[str, Any]: Information about the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_list(self, list_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get information about a specific reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list.\n\n    Returns:\n        Dict[str, Any]: Information about the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the list.\n    \"\"\"\n    try:\n        response = self.client.get(f\"/replists/{list_id}\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"get reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_lists","title":"get_lists","text":"<pre><code>get_lists(search: Optional[str] = None, ordering: Optional[str] = None, limit: int = 100, offset: int = 0) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of reputation lists.</p> <p>Args:     search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.     ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix '-' for descending order.     limit (int): Maximum number of lists to return (default: 100).     offset (int): Number of lists to skip (default: 0).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing reputation list information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the lists.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_lists(self, search: Optional[str] = None, ordering: Optional[str] = None,\n              limit: int = 100, offset: int = 0) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of reputation lists.\n\n    Args:\n        search (Optional[str]): Keyword to filter the lists by name, description, or vendor name.\n        ordering (Optional[str]): Field to sort the results by (id, name, color, type, created, modified, items_count, description, vendor__name). Use prefix '-' for descending order.\n        limit (int): Maximum number of lists to return (default: 100).\n        offset (int): Number of lists to skip (default: 0).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing reputation list information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the lists.\n    \"\"\"\n    response = self._get_lists_data(search, ordering, limit, offset)\n    return response['results']\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Dict[str, Any]\n</code></pre> <p>Get statistics about reputation lists.</p> <p>Returns:     Dict[str, Any]: Statistics about reputation lists.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the statistics.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def get_stats(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get statistics about reputation lists.\n\n    Returns:\n        Dict[str, Any]: Statistics about reputation lists.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the statistics.\n    \"\"\"\n    try:\n        response = self.client.get(\"/replists/stats\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = \"get reputation lists statistics\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get reputation lists statistics: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.remove_item","title":"remove_item","text":"<pre><code>remove_item(external_key: str, value: str) -&gt; None\n</code></pre> <p>Remove an item from a dynamic reputation list.</p> <p>Args:     external_key (str): External key of the reputation list.     value (str): Value to remove from the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error removing the item.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def remove_item(self, external_key: str, value: str) -&gt; None:\n    \"\"\"\n    Remove an item from a dynamic reputation list.\n\n    Args:\n        external_key (str): External key of the reputation list.\n        value (str): Value to remove from the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error removing the item.\n    \"\"\"\n    try:\n        response = self.client.delete(f\"/replists/dynamic/{external_key}/{value}\")\n        if response.status_code != 204:\n            raise PTNADAPIError(f\"Failed to remove item from reputation list {external_key}: {response.text}\")\n    except PTNADAPIError as e:\n        e.operation = f\"remove item from reputation list {external_key}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to remove item from reputation list {external_key}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/replists/#ptnad.api.replists.RepListsAPI.update_list","title":"update_list","text":"<pre><code>update_list(list_id: int, **kwargs) -&gt; Dict[str, Any]\n</code></pre> <p>Update a reputation list.</p> <p>Args:     list_id (int): ID of the reputation list to update.     **kwargs: Fields to update (color, name, type, description, content).</p> <p>Returns:     Dict[str, Any]: Updated information about the reputation list.</p> <p>Raises:     PTNADAPIError: If there's an error updating the list.</p> Source code in <code>src/ptnad/api/replists.py</code> <pre><code>def update_list(self, list_id: int, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update a reputation list.\n\n    Args:\n        list_id (int): ID of the reputation list to update.\n        **kwargs: Fields to update (color, name, type, description, content).\n\n    Returns:\n        Dict[str, Any]: Updated information about the reputation list.\n\n    Raises:\n        PTNADAPIError: If there's an error updating the list.\n    \"\"\"\n    try:\n        response = self.client.patch(f\"/replists/{list_id}\", json=kwargs).json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"update reputation list {list_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to update reputation list {list_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/","title":"Signatures","text":""},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI","title":"ptnad.api.signatures.SignaturesAPI","text":"<pre><code>SignaturesAPI(client)\n</code></pre> <p>Methods:</p> Name Description <code>apply_changes</code> <p>Apply changes made to Rules and commit them to sensors.</p> <code>get_all_rules</code> <p>Get all Rules using pagination.</p> <code>get_classes</code> <p>Get a list of signature classes.</p> <code>get_rule</code> <p>Get information about a specific Rule.</p> <code>get_rules</code> <p>Get a list of Rules.</p> <code>get_stats</code> <p>Get statistics about Rules.</p> <code>revert_changes</code> <p>Revert changes made to Rules.</p> <code>update_rule</code> <p>Update a Rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def __init__(self, client):\n    self.client = client\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.apply_changes","title":"apply_changes","text":"<pre><code>apply_changes() -&gt; Dict[str, str]\n</code></pre> <p>Apply changes made to Rules and commit them to sensors.</p> <p>Returns:     Dict[str, str]: A dictionary with the hashsum of the package.</p> <p>Raises:     PTNADAPIError: If there's an error applying the changes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def apply_changes(self) -&gt; Dict[str, str]:\n    \"\"\"\n    Apply changes made to Rules and commit them to sensors.\n\n    Returns:\n        Dict[str, str]: A dictionary with the hashsum of the package.\n\n    Raises:\n        PTNADAPIError: If there's an error applying the changes.\n    \"\"\"\n    try:\n        response = self.client.post(\"/signatures/commit\").json()\n        if \"hashsum\" in response:\n            return response\n        elif \"fatal_error\" in response or \"other_errors\" in response:\n            errors = []\n            if \"fatal_error\" in response and response[\"fatal_error\"]:\n                errors.append(response[\"fatal_error\"])\n            if \"other_errors\" in response and response[\"other_errors\"]:\n                errors.extend(response[\"other_errors\"])\n            raise PTNADAPIError(f\"Failed to commit signature changes: {', '.join(errors)}\")\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"commit signature changes: {', '.join(errors)}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to apply Rule changes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.get_all_rules","title":"get_all_rules","text":"<pre><code>get_all_rules(search: Optional[str] = None, ordering: Optional[str] = None, limit: int = 100, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get all Rules using pagination.</p> <p>Args:     search (Optional[str]): Keyword to filter the rules.     ordering (Optional[str]): Field to sort the results by.     limit (int): Number of rules to fetch per request (default: 100).     *filters: Additional filters. Available filters:         sid: Filter by sid (can be a single value or a list)         sid__gte: sid greater than or equal to         sid__lt: sid less than         vendor: Filter by vendor name (can be a single value or a list)         enabled: Filter by enabled status (true or false)         has_redef: Filter by has_redef status (true or false)         has_exceptions: Filter by has_exceptions status (true or false)         priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)         cls: Filter by class name (can be a single value or a list)         diff: Filter by rule changes, valid values (can be a list): added (+), updated (), removed (-), unchanged (=)         has_error: Filter by has_error status (true or false)         client: Search for IP address in src_adr and dst_adr         server: Search for IP address in src_adr and dst_adr</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing all Rule information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rules.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_all_rules(self, search: Optional[str] = None, ordering: Optional[str] = None,\n                  limit: int = 100, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get all Rules using pagination.\n\n    Args:\n        search (Optional[str]): Keyword to filter the rules.\n        ordering (Optional[str]): Field to sort the results by.\n        limit (int): Number of rules to fetch per request (default: 100).\n        **filters: Additional filters. Available filters:\n            sid: Filter by sid (can be a single value or a list)\n            sid__gte: sid greater than or equal to\n            sid__lt: sid less than\n            vendor: Filter by vendor name (can be a single value or a list)\n            enabled: Filter by enabled status (true or false)\n            has_redef: Filter by has_redef status (true or false)\n            has_exceptions: Filter by has_exceptions status (true or false)\n            priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)\n            cls: Filter by class name (can be a single value or a list)\n            diff: Filter by rule changes, valid values (can be a list): added (+), updated (*), removed (-), unchanged (=)\n            has_error: Filter by has_error status (true or false)\n            client: Search for IP address in src_adr and dst_adr\n            server: Search for IP address in src_adr and dst_adr\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing all Rule information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rules.\n    \"\"\"\n    all_rules = []\n    offset = 0\n\n    while True:\n        response = self._get_rules_data(search, ordering, limit, offset, **filters)\n        rules = response['results']\n        all_rules.extend(rules)\n\n        if response['next'] is None:\n            break\n\n        offset += limit\n\n    return all_rules\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.get_classes","title":"get_classes","text":"<pre><code>get_classes(search: Optional[str] = None, ordering: Optional[str] = None, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of signature classes.</p> <p>Args:     search (Optional[str]): Keyword to filter the classes.     ordering (Optional[str]): Field to sort the results by.     **filters: Additional filters (name, title, priority).</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing signature class information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the classes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_classes(self, search: Optional[str] = None, ordering: Optional[str] = None, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of signature classes.\n\n    Args:\n        search (Optional[str]): Keyword to filter the classes.\n        ordering (Optional[str]): Field to sort the results by.\n        **filters: Additional filters (name, title, priority).\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing signature class information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the classes.\n    \"\"\"\n    params = {k: v for k, v in filters.items() if v is not None}\n    if search:\n        params['search'] = search\n    if ordering:\n        params['ordering'] = ordering\n\n    try:\n        response = self.client.get(\"/signatures/classes\", params=params).json()\n        return response['results']\n    except PTNADAPIError as e:\n        e.operation = \"get signature classes\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get signature classes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.get_rule","title":"get_rule","text":"<pre><code>get_rule(rule_id: int) -&gt; Dict[str, Any]\n</code></pre> <p>Get information about a specific Rule.</p> <p>Args:     rule_id (int): sid of the Rule.</p> <p>Returns:     Dict[str, Any]: Information about the Rule.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_rule(self, rule_id: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get information about a specific Rule.\n\n    Args:\n        rule_id (int): sid of the Rule.\n\n    Returns:\n        Dict[str, Any]: Information about the Rule.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rule.\n    \"\"\"\n    try:\n        response = self.client.get(f\"/signatures/rules/{rule_id}\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"get Rule {rule_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get rule {rule_id}: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.get_rules","title":"get_rules","text":"<pre><code>get_rules(search: Optional[str] = None, ordering: Optional[str] = None, limit: int = 100, offset: int = 0, **filters) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Get a list of Rules.</p> <p>Args:     search (Optional[str]): Keyword to filter the rules.     ordering (Optional[str]): Field to sort the results by.     limit (int): Maximum number of rules to return (default: 100).     offset (int): Number of rules to skip (default: 0).     *filters: Additional filters. Available filters:         sid: Filter by sid (can be a single value or a list)         sid__gte: sid greater than or equal to         sid__lt: sid less than         vendor: Filter by vendor name (can be a single value or a list)         enabled: Filter by enabled status (true or false)         has_redef: Filter by has_redef status (true or false)         has_exceptions: Filter by has_exceptions status (true or false)         priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)         cls: Filter by class name (can be a single value or a list)         diff: Filter by rule changes, valid values (can be a list): added (+), updated (), removed (-), unchanged (=). Available in 12.2+         has_error: Filter by has_error status (true or false)         client: Search for IP address in src_adr and dst_adr         server: Search for IP address in src_adr and dst_adr</p> <p>Returns:     List[Dict[str, Any]]: A list of dictionaries containing Rule information.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the rules.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_rules(self, search: Optional[str] = None, ordering: Optional[str] = None,\n              limit: int = 100, offset: int = 0, **filters) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Get a list of Rules.\n\n    Args:\n        search (Optional[str]): Keyword to filter the rules.\n        ordering (Optional[str]): Field to sort the results by.\n        limit (int): Maximum number of rules to return (default: 100).\n        offset (int): Number of rules to skip (default: 0).\n        **filters: Additional filters. Available filters:\n            sid: Filter by sid (can be a single value or a list)\n            sid__gte: sid greater than or equal to\n            sid__lt: sid less than\n            vendor: Filter by vendor name (can be a single value or a list)\n            enabled: Filter by enabled status (true or false)\n            has_redef: Filter by has_redef status (true or false)\n            has_exceptions: Filter by has_exceptions status (true or false)\n            priority: Filter by priority (if priority=4, finds all rules with priority&gt;=4)\n            cls: Filter by class name (can be a single value or a list)\n            diff: Filter by rule changes, valid values (can be a list): added (+), updated (*), removed (-), unchanged (=). Available in 12.2+\n            has_error: Filter by has_error status (true or false)\n            client: Search for IP address in src_adr and dst_adr\n            server: Search for IP address in src_adr and dst_adr\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries containing Rule information.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the rules.\n    \"\"\"\n    response = self._get_rules_data(search, ordering, limit, offset, **filters)\n    return response['results']\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.get_stats","title":"get_stats","text":"<pre><code>get_stats() -&gt; Dict[str, Any]\n</code></pre> <p>Get statistics about Rules.</p> <p>Returns:     Dict[str, Any]: Statistics about Rules.</p> <p>Raises:     PTNADAPIError: If there's an error retrieving the statistics.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def get_stats(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get statistics about Rules.\n\n    Returns:\n        Dict[str, Any]: Statistics about Rules.\n\n    Raises:\n        PTNADAPIError: If there's an error retrieving the statistics.\n    \"\"\"\n    try:\n        response = self.client.get(\"/signatures/stats\").json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = \"get Rules statistics\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to get Rules statistics: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.revert_changes","title":"revert_changes","text":"<pre><code>revert_changes() -&gt; None\n</code></pre> <p>Revert changes made to Rules.</p> <p>Raises:     PTNADAPIError: If there's an error reverting the changes.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def revert_changes(self) -&gt; None:\n    \"\"\"\n    Revert changes made to Rules.\n\n    Raises:\n        PTNADAPIError: If there's an error reverting the changes.\n    \"\"\"\n    try:\n        self.client.post(\"/signatures/rollback\")\n    except PTNADAPIError as e:\n        e.operation = \"revert Rule changes\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to revert Rule changes: {str(e)}\")\n</code></pre>"},{"location":"reference/api/signatures/#ptnad.api.signatures.SignaturesAPI.update_rule","title":"update_rule","text":"<pre><code>update_rule(rule_id: int, **kwargs) -&gt; Dict[str, Any]\n</code></pre> <p>Update a Rule.</p> <p>Args:     rule_id (int): ID of the Rule to update.     **kwargs: Fields to update (enabled, action, msg, etc.).</p> <p>Returns:     Dict[str, Any]: Updated information about the Rule.</p> <p>Raises:     PTNADAPIError: If there's an error updating the rule.</p> Source code in <code>src/ptnad/api/signatures.py</code> <pre><code>def update_rule(self, rule_id: int, **kwargs) -&gt; Dict[str, Any]:\n    \"\"\"\n    Update a Rule.\n\n    Args:\n        rule_id (int): ID of the Rule to update.\n        **kwargs: Fields to update (enabled, action, msg, etc.).\n\n    Returns:\n        Dict[str, Any]: Updated information about the Rule.\n\n    Raises:\n        PTNADAPIError: If there's an error updating the rule.\n    \"\"\"\n    try:\n        response = self.client.patch(f\"/signatures/rules/{rule_id}\", json=kwargs).json()\n        return response\n    except PTNADAPIError as e:\n        e.operation = f\"update Rule {rule_id}\"\n        raise\n    except Exception as e:\n        raise PTNADAPIError(f\"Failed to update Rule {rule_id}: {str(e)}\")\n</code></pre>"},{"location":"ru/#pt-nad-client","title":"PT NAD Client","text":"<p>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f: https://reversenant/test-nad</p> <p>\u0418\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043a\u043e\u0434: https://github.com/reversenant/test-nad</p> <p>\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u043d\u0430 Python \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 API PT NAD.</p>"},{"location":"ru/#_1","title":"\ud83d\ude80 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<pre><code>pip install ptnad-client\n</code></pre>"},{"location":"ru/#_2","title":"\ud83d\udcd6 \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":"<p><pre><code>from ptnad import PTNADClient\n\nclient = PTNADClient(\"https://1.3.3.7\", verify_ssl=False)\nclient.set_auth(username=\"user\", password=\"pass\")\n# client.set_auth(auth_type=\"sso\", username=\"user\", password=\"pass\", client_id=\"ptnad\", client_secret=\"11111111-abcd-asdf-12334-0123456789ab\", sso_url=\"https://siem.example.local:3334\")\nclient.login()\n\nquery = \"SELECT src.ip, dst.ip, proto FROM flow WHERE end &gt; 2025.02.25 and end &lt; 2025.02.26 LIMIT 10\"\nresult = client.bql.execute(query)\nprint(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: {result}\")\n</code></pre> </p>"},{"location":"ru/#_3","title":"\u2705 \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438","text":"<p>\ud83d\udd10 \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f - \u041b\u043e\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f - IAM (SSO) \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f  </p> <p>\ud83d\udcca BQL-\u0437\u0430\u043f\u0440\u043e\u0441\u044b - \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432  </p> <p>\ud83d\udce1 \u041c\u043e\u043d\u0438\u0442\u043e\u0440\u0438\u043d\u0433 - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u044b - \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u0430\u043c\u0438  </p> <p>\ud83d\udee1\ufe0f \u0421\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u044b - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u043b (\u0432\u0441\u0435\u0445/\u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0445) - \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435/\u043e\u0442\u043a\u0430\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439  </p> <p>\ud83d\udccb \u0420\u0435\u043f\u043b\u0438\u0441\u0442\u044b - \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435/\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0438 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0440\u0435\u043f\u043b\u0438\u0441\u0442\u043e\u0432 - \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0440\u0435\u043f\u043b\u0438\u0441\u0442\u0430\u0445  </p>"},{"location":"ru/#_4","title":"\ud83d\udee0\ufe0f \u041f\u043b\u0430\u043d\u0438\u0440\u0443\u0435\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","text":"<ul> <li>\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f  </li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438  </li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0445\u043e\u0441\u0442\u0430\u043c\u0438  </li> <li>\u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0433\u0440\u0443\u043f\u043f\u0430\u043c\u0438  </li> </ul>"},{"location":"ru/#_5","title":"\ud83e\uddd1\u200d\ud83d\udcbb \u0412\u043a\u043b\u0430\u0434 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442","text":"<p>\u0425\u043e\u0442\u0438\u0442\u0435 \u0432\u043d\u0435\u0441\u0442\u0438 \u0441\u0432\u043e\u0439 \u0432\u043a\u043b\u0430\u0434? \u041e\u0437\u043d\u0430\u043a\u043e\u043c\u044c\u0442\u0435\u0441\u044c \u0441 \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u0430\u043c\u0438:</p> <ul> <li>\ud83d\udcc4 \u0413\u0430\u0439\u0434 \u0434\u043b\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432</li> </ul> <p>\u041c\u044b \u043e\u0442\u043a\u0440\u044b\u0442\u044b \u0434\u043b\u044f \u043b\u044e\u0431\u044b\u0445 \u0438\u0434\u0435\u0439, \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0439!</p>"},{"location":"ru/#_6","title":"\ud83d\udcdc \u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f","text":"<p>\u042d\u0442\u043e\u0442 \u043f\u0440\u043e\u0435\u043a\u0442 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e\u0434 MIT License \u2013 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0441\u043c. \u0432 \u0444\u0430\u0439\u043b\u0435 LICENSE.</p>"},{"location":"ru/CONTRIBUTING/","title":"\ud83e\udd1d Contributing Guide","text":"<p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441 \u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0443! \u0412\u043e\u0442 \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u0432\u043a\u043b\u0430\u0434:</p>"},{"location":"ru/CONTRIBUTING/#_1","title":"\ud83d\ude80 \u041a\u0430\u043a \u043d\u0430\u0447\u0430\u0442\u044c","text":"<ol> <li>\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0444\u043e\u0440\u043a \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u044f</li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u043d\u043e\u0432\u0443\u044e \u0432\u0435\u0442\u043a\u0443: <pre><code>git checkout -b feature/\u0432\u0430\u0448\u0430_\u0444\u0438\u0447\u0430\n</code></pre></li> <li>\u0412\u043d\u0435\u0441\u0438\u0442\u0435 \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f</li> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u043a\u043e\u0434</li> <li>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 Pull Request \u043d\u0430 <code>main</code> \u0438\u043b\u0438 <code>dev</code> (\u0443\u0442\u043e\u0447\u043d\u0438\u0442\u044c \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438)</li> </ol>"},{"location":"ru/CONTRIBUTING/#_2","title":"\u2705 \u0427\u0442\u043e \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f","text":"<ul> <li>\u0423\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438</li> <li>\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0430\u0445 (issues)</li> <li>\u041d\u043e\u0432\u044b\u0435 \u0444\u0438\u0447\u0438 (\u0432 \u0438\u0434\u0435\u0430\u043b\u0435 - \u0441 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u0435\u043c)</li> <li>\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u043a \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430</li> </ul>"},{"location":"ru/CONTRIBUTING/#_3","title":"\ud83e\uddf9 \u0421\u0442\u0438\u043b\u044c \u043a\u043e\u0434\u0430","text":"<ul> <li>\u0421\u043e\u0431\u043b\u044e\u0434\u0430\u0439\u0442\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438 \u0441\u0442\u0438\u043b\u044c (eslint/black/prettier)</li> <li>\u0421\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0441\u043c\u044b\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043a\u043e\u043c\u043c\u0438\u0442\u044b: <pre><code>feature: \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 X \nfix: \u0443\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 Y \ndocs: \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f\n</code></pre></li> </ul>"},{"location":"ru/CONTRIBUTING/#_4","title":"\ud83c\udf10 \u0425\u043e\u0447\u0443 \u043f\u043e\u043c\u043e\u0447\u044c \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c","text":"<p>\u041c\u044b \u0441\u0442\u0440\u0435\u043c\u0438\u043c\u0441\u044f \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u043c \u0434\u043b\u044f \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043b\u044e\u0434\u0435\u0439. \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u043f\u043e\u043c\u043e\u0447\u044c \u0441 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u043e\u043c \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u044f\u0437\u044b\u043a \u2014 \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442\u0441\u044f!</p> <p>\ud83d\udcc4 \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u044b: - \ud83c\uddfa\ud83c\uddf8 English (default) - \ud83c\uddf7\ud83c\uddfa \u0420\u0443\u0441\u0441\u043a\u0438\u0439 (\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435) - \ud83c\udf10 \u0412\u0430\u0448 \u044f\u0437\u044b\u043a? \u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u043d\u0430\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c!</p> <p>\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 issue</p>"},{"location":"ru/CONTRIBUTING/#best-practices","title":"\ud83d\udee0 Best Practices","text":"<ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0435\u0439, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0432 <code>package.json</code>/<code>requirements.txt</code>/<code>pyproject.toml</code></li> <li>\u0421\u043b\u0435\u0434\u0443\u0439\u0442\u0435 \u0441\u0442\u0438\u043b\u044e \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u043f\u0440\u0438\u043d\u044f\u0442\u043e\u043c\u0443 \u0432 \u043f\u0440\u043e\u0435\u043a\u0442\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0447\u0435\u0440\u0435\u0437 <code>eslint</code>, <code>black</code>, <code>prettier</code>, etc.)</li> <li>\u041f\u0438\u0448\u0438\u0442\u0435 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0438 \u0441\u0430\u043c\u043e\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u043a\u043e\u0434</li> <li>\u0421\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0432\u043d\u043e\u0441\u0438\u043c\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0442\u0435\u0441\u0442\u0430\u043c\u0438</li> <li>\u041f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c issue \u2014 \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435, \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043b\u0438 \u0443\u0436\u0435 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438</li> <li>\u0414\u0435\u043b\u0430\u0439\u0442\u0435 feature-\u0432\u0435\u0442\u043a\u0438 \u0438 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0439\u0442\u0435 pull request \u0441 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c</li> </ul>"},{"location":"ru/CONTRIBUTING/#developer-certificate-of-origin-dco","title":"\u270d\ufe0f Developer Certificate of Origin (DCO)","text":"<p>\u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0437\u0430 \u0432\u0430\u0448 \u0432\u043a\u043b\u0430\u0434! \u0427\u0442\u043e\u0431\u044b \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0437\u0440\u0430\u0447\u043d\u043e\u0441\u0442\u044c \u0438 \u044e\u0440\u0438\u0434\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0447\u0438\u0441\u0442\u043e\u0442\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Developer Certificate of Origin (DCO).</p>"},{"location":"ru/CONTRIBUTING/#dco","title":"\ud83d\udcdc \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 DCO?","text":"<p>DCO \u2014 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0437\u0430\u044f\u0432\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u044b \u0438\u043c\u0435\u0435\u0442\u0435 \u043f\u0440\u0430\u0432\u043e \u0432\u043d\u0435\u0441\u0442\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u043f\u0440\u043e\u0435\u043a\u0442 \u0438 \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u0435\u0442\u0435\u0441\u044c \u0441 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c\u0438 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438. \u042d\u0442\u043e \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0432\u0430\u0436\u043d\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u043c \u043a\u043e\u0434\u043e\u043c.</p> <p>\u041f\u043e\u043b\u043d\u044b\u0439 \u0442\u0435\u043a\u0441\u0442 DCO: https://developercertificate.org</p>"},{"location":"ru/CONTRIBUTING/#_5","title":"\u2705 \u0427\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c?","text":"<p>\u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u043d. \u042d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0444\u043b\u0430\u0433 <code>-s</code> \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0438\u0442\u0430:</p> <pre><code>git commit -s -m \"fix: \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0430 \u043e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043e\u0448\u0438\u0431\u043e\u043a\"\n</code></pre> <p>\u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u043e\u0434\u043f\u0438\u0441\u0438 \u0432 \u043a\u043e\u043c\u043c\u0438\u0442\u0435:</p> <pre><code>Signed-off-by: \u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432 &lt;ivan@example.com&gt;\n</code></pre>"},{"location":"ru/CONTRIBUTING/#email","title":"\ud83d\udee0 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438\u043c\u0435\u043d\u0438 \u0438 email","text":"<p>\u0423\u0431\u0435\u0434\u0438\u0442\u0435\u0441\u044c, \u0447\u0442\u043e \u0432 Git \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043e \u0432\u0430\u0448\u0435 \u0438\u043c\u044f \u0438 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b:</p> <pre><code>git config --global user.name \"\u0412\u0430\u0448\u0435 \u0418\u043c\u044f\"\ngit config --global user.email \"\u0432\u0430\u0448_email@example.com\"\n</code></pre>"},{"location":"ru/CONTRIBUTING/#_6","title":"\ud83d\udd01 \u041a\u0430\u043a \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442\u044b","text":"<p>\u0415\u0441\u043b\u0438 \u0432\u044b \u0437\u0430\u0431\u044b\u043b\u0438 \u043f\u043e\u0434\u043f\u0438\u0441\u0430\u0442\u044c \u043a\u043e\u043c\u043c\u0438\u0442:</p>"},{"location":"ru/CONTRIBUTING/#_7","title":"\u041e\u0434\u0438\u043d \u043a\u043e\u043c\u043c\u0438\u0442","text":"<pre><code>git commit --amend -s\ngit push --force\n</code></pre>"},{"location":"ru/CONTRIBUTING/#_8","title":"\u041d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432","text":"<pre><code>git rebase -i HEAD~N  # \u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 N \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432\n</code></pre> <p>\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u0435 <code>pick</code> \u043d\u0430 <code>edit</code> \u0443 \u043d\u0443\u0436\u043d\u044b\u0445 \u043a\u043e\u043c\u043c\u0438\u0442\u043e\u0432, \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435:</p> <pre><code>git commit --amend -s\ngit rebase --continue\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f rebase:</p> <pre><code>git push --force\n</code></pre> <p>\u26a0\ufe0f \u0412\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 <code>--force</code> \u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u044f, \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u043f\u0440\u0438 \u0441\u043e\u0432\u043c\u0435\u0441\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043d\u0430\u0434 \u0432\u0435\u0442\u043a\u043e\u0439.</p>"}]}